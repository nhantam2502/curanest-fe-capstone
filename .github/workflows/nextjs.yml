name: Deploy web UI - curanest - to VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t pardes29/curanest_fe:v1 .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push pardes29/curanest_fe:v1

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH to VPS and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            RETRY_COUNT=0
            MAX_RETRIES=3
            until [ $RETRY_COUNT -ge $MAX_RETRIES ]
            do
              if timeout 60 docker pull pardes29/curanest_fe:v1; then
                  echo "Pull image successfully."
                  break
              else
                  echo "Image pull failed. Try again in 10 seconds..."
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  sleep 10
              fi
            done

            # Exit if maximum number of attempts reached
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "Unable to pull image after $MAX_RETRIES attempts"
                exit 1
            fi

            # Change to the directory containing docker-compose.yaml
            cd /home/sep-curanest-prod/web

            # Stop and remove existing containers if they are running
            docker compose down

            # Start the services using Docker Compose (in detached mode)
            docker compose up -d

            # Optional: Remove unused images to free up space
            dangling_images=$(docker images pardes29/curanest_fe --filter "dangling=true" -q)
            if [ ! -z "$dangling_images" ]; then
                docker rmi $dangling_images
            fi
